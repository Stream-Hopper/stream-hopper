"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NgrokAdapter = void 0;
var tslib_1 = require("tslib");
var portfinder_1 = require("@d-fischer/portfinder");
var shared_utils_1 = require("@d-fischer/shared-utils");
var ngrok_1 = require("ngrok");
var twitch_eventsub_1 = require("twitch-eventsub");
/**
 * A connection adapter that uses ngrok to make local testing easy.
 */
var NgrokAdapter = /** @class */ (function (_super) {
    tslib_1.__extends(NgrokAdapter, _super);
    function NgrokAdapter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(NgrokAdapter.prototype, "connectUsingSsl", {
        /** @protected */
        // eslint-disable-next-line @typescript-eslint/class-literal-property-style
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    /** @protected */
    NgrokAdapter.prototype.getListenerPort = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                if (!this._listenerPortPromise) {
                    this._listenerPortPromise = portfinder_1.getPortPromise();
                }
                return [2 /*return*/, this._listenerPortPromise];
            });
        });
    };
    /** @protected */
    NgrokAdapter.prototype.getExternalPort = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, 443];
            });
        });
    };
    /** @protected */
    NgrokAdapter.prototype.getHostName = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var listenerPort;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getListenerPort()];
                    case 1:
                        listenerPort = _a.sent();
                        if (!this._hostNamePromise) {
                            this._hostNamePromise = ngrok_1.connect({ addr: listenerPort }).then(function (url) { return url.replace(/^https?:\/\/|\/$/, ''); });
                        }
                        return [2 /*return*/, this._hostNamePromise];
                }
            });
        });
    };
    tslib_1.__decorate([
        shared_utils_1.Enumerable(false)
    ], NgrokAdapter.prototype, "_listenerPortPromise", void 0);
    tslib_1.__decorate([
        shared_utils_1.Enumerable(false)
    ], NgrokAdapter.prototype, "_hostNamePromise", void 0);
    return NgrokAdapter;
}(twitch_eventsub_1.ConnectionAdapter));
exports.NgrokAdapter = NgrokAdapter;
