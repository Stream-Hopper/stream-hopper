import { __awaiter, __decorate, __extends, __generator } from "tslib";
import { getPortPromise } from '@d-fischer/portfinder';
import { Enumerable } from '@d-fischer/shared-utils';
import { connect } from 'ngrok';
import { ConnectionAdapter } from 'twitch-eventsub';
/**
 * A connection adapter that uses ngrok to make local testing easy.
 */
var NgrokAdapter = /** @class */ (function (_super) {
    __extends(NgrokAdapter, _super);
    function NgrokAdapter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(NgrokAdapter.prototype, "connectUsingSsl", {
        /** @protected */
        // eslint-disable-next-line @typescript-eslint/class-literal-property-style
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    /** @protected */
    NgrokAdapter.prototype.getListenerPort = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                if (!this._listenerPortPromise) {
                    this._listenerPortPromise = getPortPromise();
                }
                return [2 /*return*/, this._listenerPortPromise];
            });
        });
    };
    /** @protected */
    NgrokAdapter.prototype.getExternalPort = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, 443];
            });
        });
    };
    /** @protected */
    NgrokAdapter.prototype.getHostName = function () {
        return __awaiter(this, void 0, Promise, function () {
            var listenerPort;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getListenerPort()];
                    case 1:
                        listenerPort = _a.sent();
                        if (!this._hostNamePromise) {
                            this._hostNamePromise = connect({ addr: listenerPort }).then(function (url) { return url.replace(/^https?:\/\/|\/$/, ''); });
                        }
                        return [2 /*return*/, this._hostNamePromise];
                }
            });
        });
    };
    __decorate([
        Enumerable(false)
    ], NgrokAdapter.prototype, "_listenerPortPromise", void 0);
    __decorate([
        Enumerable(false)
    ], NgrokAdapter.prototype, "_hostNamePromise", void 0);
    return NgrokAdapter;
}(ConnectionAdapter));
export { NgrokAdapter };
