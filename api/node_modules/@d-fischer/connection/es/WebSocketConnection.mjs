import { __awaiter, __extends, __generator } from "tslib";
import WebSocket from '@d-fischer/isomorphic-ws';
import { AbstractConnection } from "./AbstractConnection.mjs";
var WebSocketConnection = /** @class */ (function (_super) {
    __extends(WebSocketConnection, _super);
    function WebSocketConnection() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._socket = null;
        return _this;
    }
    Object.defineProperty(WebSocketConnection.prototype, "port", {
        get: function () {
            return this._port;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WebSocketConnection.prototype, "hasSocket", {
        get: function () {
            return !!this._socket;
        },
        enumerable: false,
        configurable: true
    });
    WebSocketConnection.prototype.sendRaw = function (line) {
        var _a;
        (_a = this._socket) === null || _a === void 0 ? void 0 : _a.send(line);
    };
    WebSocketConnection.prototype.connect = function () {
        var _a;
        return __awaiter(this, void 0, Promise, function () {
            var _this = this;
            return __generator(this, function (_b) {
                (_a = this._logger) === null || _a === void 0 ? void 0 : _a.trace('WebSocketConnection connect');
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var _a;
                        _this._connecting = true;
                        var url = "ws" + (_this._secure ? 's' : '') + "://" + _this._host + ":" + _this.port;
                        _this._socket = new WebSocket(url, (_a = _this._additionalOptions) === null || _a === void 0 ? void 0 : _a.wsOptions);
                        _this._socket.onopen = function () {
                            var _a;
                            (_a = _this._logger) === null || _a === void 0 ? void 0 : _a.trace('WebSocketConnection onOpen');
                            _this._connected = true;
                            _this._connecting = false;
                            _this.emit(_this.onConnect);
                            resolve();
                        };
                        _this._socket.onmessage = function (_a) {
                            var data = _a.data;
                            _this.receiveRaw(data.toString());
                        };
                        // The following empty error callback needs to exist so connection errors are passed down to `onclose` down below - otherwise the process just crashes instead
                        _this._socket.onerror = function (e) {
                            var _a, _b;
                            (_a = _this._logger) === null || _a === void 0 ? void 0 : _a.trace("WebSocketConnection onError message:" + e.message);
                            (_b = _this._logger) === null || _b === void 0 ? void 0 : _b.warn('WebSocket onerror callback called, please change the log level to trace and open an issue with the debug log');
                        };
                        _this._socket.onclose = function (e) {
                            var _a;
                            var wasConnected = _this._connected;
                            (_a = _this._logger) === null || _a === void 0 ? void 0 : _a.trace("WebSocketConnection onClose wasConnected:" + wasConnected.toString() + " wasClean:" + e.wasClean.toString());
                            _this._connected = false;
                            _this._connecting = false;
                            if (e.wasClean) {
                                _this.emit(_this.onDisconnect, true);
                                _this.emit(_this.onEnd, true);
                            }
                            else {
                                var err = new Error("[" + e.code + "] " + e.reason);
                                _this.emit(_this.onDisconnect, false, err);
                                _this.emit(_this.onEnd, false, err);
                                if (!wasConnected) {
                                    reject(err);
                                }
                            }
                            if (_this._socket) {
                                _this._socket.onopen = null;
                                _this._socket.onmessage = null;
                                _this._socket.onerror = null;
                                _this._socket.onclose = null;
                                _this._socket = null;
                            }
                        };
                    })];
            });
        });
    };
    WebSocketConnection.prototype.disconnect = function () {
        var _a;
        return __awaiter(this, void 0, Promise, function () {
            var _this = this;
            return __generator(this, function (_b) {
                (_a = this._logger) === null || _a === void 0 ? void 0 : _a.trace('WebSocketConnection disconnect');
                return [2 /*return*/, new Promise(function (resolve) {
                        if (_this._socket) {
                            var listener_1 = _this.onDisconnect(function () {
                                listener_1.unbind();
                                resolve();
                            });
                            _this._socket.close();
                        }
                        else {
                            resolve();
                        }
                    })];
            });
        });
    };
    return WebSocketConnection;
}(AbstractConnection));
export { WebSocketConnection };
//# sourceMappingURL=WebSocketConnection.mjs.map