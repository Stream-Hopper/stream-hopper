import { __awaiter, __decorate, __generator } from "tslib";
import { Enumerable } from '@d-fischer/shared-utils';
import { rtfm } from 'twitch-common';
/**
 * An EventSub event representing a stream going offline.
 */
var EventSubStreamOfflineEvent = /** @class */ (function () {
    /** @private */
    function EventSubStreamOfflineEvent(data, client) {
        this._data = data;
        this._client = client;
    }
    Object.defineProperty(EventSubStreamOfflineEvent.prototype, "broadcasterId", {
        /**
         * The ID of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubStreamOfflineEvent.prototype, "broadcasterName", {
        /**
         * The name of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_login;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubStreamOfflineEvent.prototype, "broadcasterDisplayName", {
        /**
         * The display name of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_name;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Retrieves more information about the broadcaster.
     */
    EventSubStreamOfflineEvent.prototype.getBroadcaster = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.helix.users.getUserById(this._data.broadcaster_user_id)];
                    case 1: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    __decorate([
        Enumerable(false)
    ], EventSubStreamOfflineEvent.prototype, "_data", void 0);
    __decorate([
        Enumerable(false)
    ], EventSubStreamOfflineEvent.prototype, "_client", void 0);
    EventSubStreamOfflineEvent = __decorate([
        rtfm('twitch-eventsub', 'EventSubStreamOfflineEvent', 'broadcasterId')
    ], EventSubStreamOfflineEvent);
    return EventSubStreamOfflineEvent;
}());
export { EventSubStreamOfflineEvent };
