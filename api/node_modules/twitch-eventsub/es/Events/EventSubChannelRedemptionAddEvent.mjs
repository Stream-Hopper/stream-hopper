import { __awaiter, __decorate, __generator } from "tslib";
import { Enumerable } from '@d-fischer/shared-utils';
import { rtfm } from 'twitch-common';
/**
 * An EventSub event representing a Channel Points redemption.
 */
var EventSubChannelRedemptionAddEvent = /** @class */ (function () {
    /** @private */
    function EventSubChannelRedemptionAddEvent(_data, client) {
        this._data = _data;
        this._client = client;
    }
    Object.defineProperty(EventSubChannelRedemptionAddEvent.prototype, "id", {
        /**
         * The ID of the redemption.
         */
        get: function () {
            return this._data.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelRedemptionAddEvent.prototype, "broadcasterId", {
        /**
         * The ID of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelRedemptionAddEvent.prototype, "broadcasterName", {
        /**
         * The name of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_login;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelRedemptionAddEvent.prototype, "broadcasterDisplayName", {
        /**
         * The display name of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_name;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Retrieves more information about the broadcaster.
     */
    EventSubChannelRedemptionAddEvent.prototype.getBroadcaster = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.helix.users.getUserById(this._data.broadcaster_user_id)];
                    case 1: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    Object.defineProperty(EventSubChannelRedemptionAddEvent.prototype, "userId", {
        /**
         * The ID of the user.
         */
        get: function () {
            return this._data.user_id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelRedemptionAddEvent.prototype, "userName", {
        /**
         * The name of the user.
         */
        get: function () {
            return this._data.user_login;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelRedemptionAddEvent.prototype, "userDisplayName", {
        /**
         * The display name of the user.
         */
        get: function () {
            return this._data.user_name;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Retrieves more information about the user.
     */
    EventSubChannelRedemptionAddEvent.prototype.getUser = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.helix.users.getUserById(this._data.user_id)];
                    case 1: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    Object.defineProperty(EventSubChannelRedemptionAddEvent.prototype, "input", {
        /**
         * The input text given by the user.
         *
         * If there is no input to be given, this is an empty string.
         */
        get: function () {
            return this._data.user_input;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelRedemptionAddEvent.prototype, "status", {
        /**
         * The status of the redemption.
         */
        get: function () {
            return this._data.status;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelRedemptionAddEvent.prototype, "rewardId", {
        /**
         * The ID of the reward that was redeemed.
         */
        get: function () {
            return this._data.reward.id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelRedemptionAddEvent.prototype, "rewardTitle", {
        /**
         * The title of the reward that was redeemed.
         */
        get: function () {
            return this._data.reward.title;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelRedemptionAddEvent.prototype, "rewardCost", {
        /**
         * The cost of the reward that was redeemed.
         */
        get: function () {
            return this._data.reward.cost;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelRedemptionAddEvent.prototype, "rewardPrompt", {
        /**
         * The description of the reward that was redeemed.
         */
        get: function () {
            return this._data.reward.prompt;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelRedemptionAddEvent.prototype, "redeemedAt", {
        /**
         * The time when the user redeemed the reward.
         */
        get: function () {
            return new Date(this._data.redeemed_at);
        },
        enumerable: false,
        configurable: true
    });
    __decorate([
        Enumerable(false)
    ], EventSubChannelRedemptionAddEvent.prototype, "_client", void 0);
    EventSubChannelRedemptionAddEvent = __decorate([
        rtfm('twitch-eventsub', 'EventSubChannelRedemptionAddEvent', 'id')
    ], EventSubChannelRedemptionAddEvent);
    return EventSubChannelRedemptionAddEvent;
}());
export { EventSubChannelRedemptionAddEvent };
