import { __awaiter, __decorate, __generator } from "tslib";
import { Enumerable } from '@d-fischer/shared-utils';
import { rtfm } from 'twitch-common';
/**
 * An EventSub event representing a broadcaster raiding another broadcaster.
 */
var EventSubChannelRaidEvent = /** @class */ (function () {
    /** @private */
    function EventSubChannelRaidEvent(_data, client) {
        this._data = _data;
        this._client = client;
    }
    Object.defineProperty(EventSubChannelRaidEvent.prototype, "raidingBroadcasterId", {
        /**
         * The ID of the raiding broadcaster.
         */
        get: function () {
            return this._data.from_broadcaster_user_id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelRaidEvent.prototype, "raidingBroadcasterName", {
        /**
         * The name of the raiding broadcaster.
         */
        get: function () {
            return this._data.from_broadcaster_user_login;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelRaidEvent.prototype, "raidingBroadcasterDisplayName", {
        /**
         * The display name of the raiding broadcaster.
         */
        get: function () {
            return this._data.from_broadcaster_user_name;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Retrieves more information about the raiding broadcaster.
     */
    EventSubChannelRaidEvent.prototype.getRaidingBroadcaster = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.helix.users.getUserById(this._data.from_broadcaster_user_id)];
                    case 1: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    Object.defineProperty(EventSubChannelRaidEvent.prototype, "raidedBroadcasterId", {
        /**
         * The ID of the raided broadcaster.
         */
        get: function () {
            return this._data.to_broadcaster_user_id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelRaidEvent.prototype, "raidedBroadcasterName", {
        /**
         * The name of the raided broadcaster.
         */
        get: function () {
            return this._data.to_broadcaster_user_login;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelRaidEvent.prototype, "raidedBroadcasterDisplayName", {
        /**
         * The display name of the raided broadcaster.
         */
        get: function () {
            return this._data.to_broadcaster_user_name;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Retrieves more information about the raided broadcaster.
     */
    EventSubChannelRaidEvent.prototype.getRaidedBroadcaster = function () {
        return __awaiter(this, void 0, Promise, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.helix.users.getUserById(this._data.to_broadcaster_user_id)];
                    case 1: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    Object.defineProperty(EventSubChannelRaidEvent.prototype, "viewers", {
        /**
         * The amount of viewers in the raid.
         */
        get: function () {
            return this._data.viewers;
        },
        enumerable: false,
        configurable: true
    });
    __decorate([
        Enumerable(false)
    ], EventSubChannelRaidEvent.prototype, "_client", void 0);
    EventSubChannelRaidEvent = __decorate([
        rtfm('twitch-eventsub', 'EventSubChannelRaidEvent', 'raidedBroadcasterId')
    ], EventSubChannelRaidEvent);
    return EventSubChannelRaidEvent;
}());
export { EventSubChannelRaidEvent };
