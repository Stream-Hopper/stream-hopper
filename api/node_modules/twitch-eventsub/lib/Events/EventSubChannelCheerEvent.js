"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSubChannelCheerEvent = void 0;
var tslib_1 = require("tslib");
var shared_utils_1 = require("@d-fischer/shared-utils");
var twitch_common_1 = require("twitch-common");
/**
 * An EventSub event representing a user cheering bits.
 */
var EventSubChannelCheerEvent = /** @class */ (function () {
    /** @private */
    function EventSubChannelCheerEvent(_data, client) {
        this._data = _data;
        this._client = client;
    }
    Object.defineProperty(EventSubChannelCheerEvent.prototype, "userId", {
        /**
         * The ID of the cheering user, null if anonymous.
         */
        get: function () {
            return this._data.user_id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelCheerEvent.prototype, "userName", {
        /**
         * The name of the cheering user, null if anonymous.
         */
        get: function () {
            return this._data.user_login;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelCheerEvent.prototype, "userDisplayName", {
        /**
         * The display name of the cheering user, null if anonymous.
         */
        get: function () {
            return this._data.user_name;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Retrieves more information about the user.
     */
    EventSubChannelCheerEvent.prototype.getUser = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this._data.user_id ? this._client.helix.users.getUserById(this._data.user_id) : null];
            });
        });
    };
    Object.defineProperty(EventSubChannelCheerEvent.prototype, "broadcasterId", {
        /**
         * The ID of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelCheerEvent.prototype, "broadcasterName", {
        /**
         * The name of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_login;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelCheerEvent.prototype, "broadcasterDisplayName", {
        /**
         * The display name of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_name;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Retrieves more information about the broadcaster.
     */
    EventSubChannelCheerEvent.prototype.getBroadcaster = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.helix.users.getUserById(this._data.broadcaster_user_id)];
                    case 1: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    Object.defineProperty(EventSubChannelCheerEvent.prototype, "isAnonymous", {
        /**
         * Whether the cheering user chose to be anonymous.
         */
        get: function () {
            return this._data.is_anonymous;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelCheerEvent.prototype, "message", {
        /**
         * The message sent with the cheer.
         */
        get: function () {
            return this._data.message;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelCheerEvent.prototype, "bits", {
        /**
         * The amount of bits cheered.
         */
        get: function () {
            return this._data.bits;
        },
        enumerable: false,
        configurable: true
    });
    tslib_1.__decorate([
        shared_utils_1.Enumerable(false)
    ], EventSubChannelCheerEvent.prototype, "_client", void 0);
    EventSubChannelCheerEvent = tslib_1.__decorate([
        twitch_common_1.rtfm('twitch-eventsub', 'EventSubChannelCheerEvent', 'userId')
    ], EventSubChannelCheerEvent);
    return EventSubChannelCheerEvent;
}());
exports.EventSubChannelCheerEvent = EventSubChannelCheerEvent;
