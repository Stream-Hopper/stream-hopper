"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSubChannelUpdateEvent = void 0;
var tslib_1 = require("tslib");
var shared_utils_1 = require("@d-fischer/shared-utils");
var twitch_common_1 = require("twitch-common");
/**
 * An EventSub event representing a change in channel metadata.
 */
var EventSubChannelUpdateEvent = /** @class */ (function () {
    /** @private */
    function EventSubChannelUpdateEvent(_data, client) {
        this._data = _data;
        this._client = client;
    }
    Object.defineProperty(EventSubChannelUpdateEvent.prototype, "broadcasterId", {
        /**
         * The ID of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelUpdateEvent.prototype, "broadcasterName", {
        /**
         * The name of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_login;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelUpdateEvent.prototype, "broadcasterDisplayName", {
        /**
         * The display name of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_name;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Retrieves more information about the broadcaster.
     */
    EventSubChannelUpdateEvent.prototype.getBroadcaster = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.helix.users.getUserById(this._data.broadcaster_user_id)];
                    case 1: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    Object.defineProperty(EventSubChannelUpdateEvent.prototype, "streamTitle", {
        /**
         * The title of the channel.
         */
        get: function () {
            return this._data.title;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelUpdateEvent.prototype, "streamLanguage", {
        /**
         * The language of the channel.
         */
        get: function () {
            return this._data.language;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelUpdateEvent.prototype, "categoryId", {
        /**
         * The ID of the game that is currently being played on the channel.
         */
        get: function () {
            return this._data.category_id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelUpdateEvent.prototype, "categoryName", {
        /**
         * The name of the game that is currently being played on the channel.
         */
        get: function () {
            return this._data.category_name;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Retrieves more information about the game that is currently being played on the channel.
     */
    EventSubChannelUpdateEvent.prototype.getGame = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.helix.games.getGameById(this._data.category_id)];
                    case 1: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    Object.defineProperty(EventSubChannelUpdateEvent.prototype, "isMature", {
        /**
         * Whether the channel is flagged as suitable for mature audiences only.
         */
        get: function () {
            return this._data.is_mature;
        },
        enumerable: false,
        configurable: true
    });
    tslib_1.__decorate([
        shared_utils_1.Enumerable(false)
    ], EventSubChannelUpdateEvent.prototype, "_client", void 0);
    EventSubChannelUpdateEvent = tslib_1.__decorate([
        twitch_common_1.rtfm('twitch-eventsub', 'EventSubChannelUpdateEvent', 'broadcasterId')
    ], EventSubChannelUpdateEvent);
    return EventSubChannelUpdateEvent;
}());
exports.EventSubChannelUpdateEvent = EventSubChannelUpdateEvent;
