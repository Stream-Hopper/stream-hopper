"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSubChannelHypeTrainBeginEvent = void 0;
var tslib_1 = require("tslib");
var shared_utils_1 = require("@d-fischer/shared-utils");
var twitch_common_1 = require("twitch-common");
/**
 * An EventSub event representing a Hype Train starting in a channel.
 */
var EventSubChannelHypeTrainBeginEvent = /** @class */ (function () {
    /** @private */
    function EventSubChannelHypeTrainBeginEvent(_data, client) {
        this._data = _data;
        this._client = client;
    }
    Object.defineProperty(EventSubChannelHypeTrainBeginEvent.prototype, "broadcasterId", {
        /**
         * The ID of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelHypeTrainBeginEvent.prototype, "broadcasterName", {
        /**
         * The name of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_login;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelHypeTrainBeginEvent.prototype, "broadcasterDisplayName", {
        /**
         * The display name of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_name;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Retrieves more information about the broadcaster.
     */
    EventSubChannelHypeTrainBeginEvent.prototype.getBroadcaster = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.helix.users.getUserById(this._data.broadcaster_user_id)];
                    case 1: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    Object.defineProperty(EventSubChannelHypeTrainBeginEvent.prototype, "total", {
        /**
         * The total points already contributed to the Hype Train.
         */
        get: function () {
            return this._data.total;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelHypeTrainBeginEvent.prototype, "progress", {
        /**
         * The number of points contributed to the Hype Train at the current level.
         */
        get: function () {
            return this._data.progress;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelHypeTrainBeginEvent.prototype, "goal", {
        /**
         * The number of points required to reach the next level.
         */
        get: function () {
            return this._data.goal;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelHypeTrainBeginEvent.prototype, "topContributors", {
        /**
         * The top contributors for the Hype Train in terms of bits and subscriptions.
         */
        get: function () {
            return this._data.top_contributions;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelHypeTrainBeginEvent.prototype, "lastContribution", {
        /**
         * The last contribution to the Hype Train.
         */
        get: function () {
            return this._data.last_contribution;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelHypeTrainBeginEvent.prototype, "startDate", {
        /**
         * The time when the Hype Train started.
         */
        get: function () {
            return new Date(this._data.started_at);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelHypeTrainBeginEvent.prototype, "expiryDate", {
        /**
         * The time when the Hype Train is expected to expire, unless a change of level occurs to extend the expiration.
         */
        get: function () {
            return new Date(this._data.expires_at);
        },
        enumerable: false,
        configurable: true
    });
    tslib_1.__decorate([
        shared_utils_1.Enumerable(false)
    ], EventSubChannelHypeTrainBeginEvent.prototype, "_client", void 0);
    EventSubChannelHypeTrainBeginEvent = tslib_1.__decorate([
        twitch_common_1.rtfm('twitch-eventsub', 'EventSubChannelHypeTrainBeginEvent', 'broadcasterId')
    ], EventSubChannelHypeTrainBeginEvent);
    return EventSubChannelHypeTrainBeginEvent;
}());
exports.EventSubChannelHypeTrainBeginEvent = EventSubChannelHypeTrainBeginEvent;
