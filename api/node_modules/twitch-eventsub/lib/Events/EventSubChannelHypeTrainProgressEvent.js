"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSubChannelHypeTrainProgressEvent = void 0;
var tslib_1 = require("tslib");
var shared_utils_1 = require("@d-fischer/shared-utils");
var twitch_common_1 = require("twitch-common");
/**
 * An EventSub event representing progress towards the Hype Train goal.
 */
var EventSubChannelHypeTrainProgressEvent = /** @class */ (function () {
    /** @private */
    function EventSubChannelHypeTrainProgressEvent(_data, client) {
        this._data = _data;
        this._client = client;
    }
    Object.defineProperty(EventSubChannelHypeTrainProgressEvent.prototype, "broadcasterId", {
        /**
         * The ID of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelHypeTrainProgressEvent.prototype, "broadcasterName", {
        /**
         * The name of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_login;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelHypeTrainProgressEvent.prototype, "broadcasterDisplayName", {
        /**
         * The display name of the broadcaster.
         */
        get: function () {
            return this._data.broadcaster_user_name;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Retrieves more information about the broadcaster.
     */
    EventSubChannelHypeTrainProgressEvent.prototype.getBroadcaster = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._client.helix.users.getUserById(this._data.broadcaster_user_id)];
                    case 1: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    Object.defineProperty(EventSubChannelHypeTrainProgressEvent.prototype, "level", {
        /**
         * The current level of the Hype Train.
         */
        get: function () {
            return this._data.level;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelHypeTrainProgressEvent.prototype, "total", {
        /**
         * The total points contributed to the Hype Train.
         */
        get: function () {
            return this._data.total;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelHypeTrainProgressEvent.prototype, "progress", {
        /**
         * The number of points contributed to the Hype Train at the current level.
         */
        get: function () {
            return this._data.progress;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelHypeTrainProgressEvent.prototype, "goal", {
        /**
         * The number of points required to reach the next level.
         */
        get: function () {
            return this._data.goal;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelHypeTrainProgressEvent.prototype, "topContributions", {
        /**
         * The contributors with the most points, for both bits and subscriptions.
         */
        get: function () {
            return this._data.top_contributions;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelHypeTrainProgressEvent.prototype, "lastContribution", {
        /**
         * The most recent contribution.
         */
        get: function () {
            return this._data.last_contribution;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelHypeTrainProgressEvent.prototype, "startDate", {
        /**
         * The time when the Hype Train started.
         */
        get: function () {
            return new Date(this._data.started_at);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubChannelHypeTrainProgressEvent.prototype, "expiryDate", {
        /**
         * The time when the Hype Train is expected to end, unless extended by reaching the goal.
         */
        get: function () {
            return new Date(this._data.expires_at);
        },
        enumerable: false,
        configurable: true
    });
    tslib_1.__decorate([
        shared_utils_1.Enumerable(false)
    ], EventSubChannelHypeTrainProgressEvent.prototype, "_client", void 0);
    EventSubChannelHypeTrainProgressEvent = tslib_1.__decorate([
        twitch_common_1.rtfm('twitch-eventsub', 'EventSubChannelHypeTrainProgressEvent', 'broadcasterId')
    ], EventSubChannelHypeTrainProgressEvent);
    return EventSubChannelHypeTrainProgressEvent;
}());
exports.EventSubChannelHypeTrainProgressEvent = EventSubChannelHypeTrainProgressEvent;
