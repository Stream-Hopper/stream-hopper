import type { ApiClient, HelixUser } from 'twitch';
import type { EventSubChannelHypeTrainContribution } from './Common/EventSubChannelHypeTrainContribution';
/** @private */
export interface EventSubChannelHypeTrainBeginEventData {
    broadcaster_user_id: string;
    broadcaster_user_login: string;
    broadcaster_user_name: string;
    total: number;
    progress: number;
    goal: number;
    top_contributions: EventSubChannelHypeTrainContribution[];
    last_contribution: EventSubChannelHypeTrainContribution;
    started_at: string;
    expires_at: string;
}
/**
 * An EventSub event representing a Hype Train starting in a channel.
 */
export declare class EventSubChannelHypeTrainBeginEvent {
    private readonly _data;
    /** @private */
    protected readonly _client: ApiClient;
    /** @private */
    constructor(_data: EventSubChannelHypeTrainBeginEventData, client: ApiClient);
    /**
     * The ID of the broadcaster.
     */
    get broadcasterId(): string;
    /**
     * The name of the broadcaster.
     */
    get broadcasterName(): string;
    /**
     * The display name of the broadcaster.
     */
    get broadcasterDisplayName(): string;
    /**
     * Retrieves more information about the broadcaster.
     */
    getBroadcaster(): Promise<HelixUser>;
    /**
     * The total points already contributed to the Hype Train.
     */
    get total(): number;
    /**
     * The number of points contributed to the Hype Train at the current level.
     */
    get progress(): number;
    /**
     * The number of points required to reach the next level.
     */
    get goal(): number;
    /**
     * The top contributors for the Hype Train in terms of bits and subscriptions.
     */
    get topContributors(): EventSubChannelHypeTrainContribution[];
    /**
     * The last contribution to the Hype Train.
     */
    get lastContribution(): EventSubChannelHypeTrainContribution;
    /**
     * The time when the Hype Train started.
     */
    get startDate(): Date;
    /**
     * The time when the Hype Train is expected to expire, unless a change of level occurs to extend the expiration.
     */
    get expiryDate(): Date;
}
