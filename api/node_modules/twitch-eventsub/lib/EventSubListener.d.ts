import type { LoggerOptions } from '@d-fischer/logger';
import { Logger } from '@d-fischer/logger';
import type { ApiClient, HelixEventSubSubscription } from 'twitch';
import type { UserIdResolvable } from 'twitch-common';
import type { ConnectionAdapter } from './Adapters/ConnectionAdapter';
import type { ConnectCompatibleApp } from './ConnectCompatibleApp';
import type { EventSubChannelBanEvent } from './Events/EventSubChannelBanEvent';
import type { EventSubChannelCheerEvent } from './Events/EventSubChannelCheerEvent';
import type { EventSubChannelFollowEvent } from './Events/EventSubChannelFollowEvent';
import type { EventSubChannelHypeTrainBeginEvent } from './Events/EventSubChannelHypeTrainBeginEvent';
import type { EventSubChannelHypeTrainEndEvent } from './Events/EventSubChannelHypeTrainEndEvent';
import type { EventSubChannelHypeTrainProgressEvent } from './Events/EventSubChannelHypeTrainProgressEvent';
import type { EventSubChannelRaidEvent } from './Events/EventSubChannelRaidEvent';
import type { EventSubChannelRedemptionAddEvent } from './Events/EventSubChannelRedemptionAddEvent';
import type { EventSubChannelRedemptionUpdateEvent } from './Events/EventSubChannelRedemptionUpdateEvent';
import type { EventSubChannelRewardEvent } from './Events/EventSubChannelRewardEvent';
import type { EventSubChannelSubscriptionEvent } from './Events/EventSubChannelSubscriptionEvent';
import type { EventSubChannelUnbanEvent } from './Events/EventSubChannelUnbanEvent';
import type { EventSubChannelUpdateEvent } from './Events/EventSubChannelUpdateEvent';
import type { EventSubStreamOfflineEvent } from './Events/EventSubStreamOfflineEvent';
import type { EventSubStreamOnlineEvent } from './Events/EventSubStreamOnlineEvent';
import type { EventSubUserAuthorizationRevokeEvent } from './Events/EventSubUserAuthorizationRevokeEvent';
import type { EventSubUserUpdateEvent } from './Events/EventSubUserUpdateEvent';
import type { EventSubSubscription } from './Subscriptions/EventSubSubscription';
/**
 * Certificate data used to make the listener server SSL capable.
 */
export interface EventSubListenerCertificateConfig {
    /**
     * The private key of your SSL certificate.
     */
    key: string;
    /**
     * Your SSL certificate.
     */
    cert: string;
}
/**
 * The configuration of a EventSub listener.
 */
export interface EventSubConfig {
    /**
     * Options to pass to the logger.
     */
    logger?: Partial<LoggerOptions>;
}
/**
 * A listener for the Twitch EventSub event distribution mechanism.
 */
export declare class EventSubListener {
    private _server?;
    private readonly _subscriptions;
    private _twitchSubscriptions;
    /** @private */ readonly _apiClient: ApiClient;
    /** @private */ readonly _secret: string;
    private readonly _adapter;
    /** @private */ readonly _logger: Logger;
    private _currentListenerPort?;
    /**
     * Creates a new EventSub listener.
     *
     * @param apiClient The ApiClient instance to use for user info and API requests.
     * @param secret The secret for Twitch to sign payloads with.
     * @param adapter The connection adapter.
     * @param config
     */
    constructor(apiClient: ApiClient, adapter: ConnectionAdapter, secret: string, config?: EventSubConfig);
    /**
     * Starts the backing server and listens to incoming EventSub notifications.
     */
    listen(port?: number): Promise<void>;
    /**
     * Resumes subscriptions that are already registered with Twitch.
     */
    resumeExistingSubscriptions(): Promise<void>;
    /**
     * Stops the backing server, suspending all active subscriptions.
     */
    unlisten(): Promise<void>;
    /**
     * Applies middleware that handles EventSub notifications to a connect-compatible app (like express).
     *
     * The express app should be started before this.
     *
     * @param app The app the middleware should be applied to.
     */
    applyMiddleware(app: ConnectCompatibleApp): Promise<void>;
    /**
     * Subscribes to events representing a stream going live.
     *
     * @param user The user for which to get notifications about their streams going live.
     * @param handler The function that will be called for any new notifications.
     */
    subscribeToStreamOnlineEvents(user: UserIdResolvable, handler: (event: EventSubStreamOnlineEvent) => void): Promise<EventSubSubscription>;
    /**
     * Subscribes to events representing a stream going offline.
     *
     * @param user The user for which to get notifications about their streams going offline.
     * @param handler The function that will be called for any new notifications.
     */
    subscribeToStreamOfflineEvents(user: UserIdResolvable, handler: (event: EventSubStreamOfflineEvent) => void): Promise<EventSubSubscription>;
    /**
     * Subscribes to events representing a change in channel metadata, e.g. stream title or category.
     *
     * @param user The user for which to get notifications about updates.
     * @param handler The function that will be called for any new notifications.
     */
    subscribeToChannelUpdateEvents(user: UserIdResolvable, handler: (event: EventSubChannelUpdateEvent) => void): Promise<EventSubSubscription>;
    /**
     * Subscribes to events that represent a user following a channel.
     *
     * @param user The user for which to get notifications about their followers.
     * @param handler The function that will be called for any new notifications.
     */
    subscribeToChannelFollowEvents(user: UserIdResolvable, handler: (event: EventSubChannelFollowEvent) => void): Promise<EventSubSubscription>;
    /**
     * Subscribes to events that represent a user subscribing to a channel.
     *
     * @param user The user for which to get notifications for about their subscribers.
     * @param handler  The function that will be called for any new notifications.
     */
    subscribeToChannelSubscriptionEvents(user: UserIdResolvable, handler: (event: EventSubChannelSubscriptionEvent) => void): Promise<EventSubSubscription>;
    /**
     * Subscribes to events that represent a user cheering some bits.
     *
     * @param user The user for which to get notifications for about cheers they get.
     * @param handler The function that will be called for any new notifications.
     */
    subscribeToChannelCheerEvents(user: UserIdResolvable, handler: (event: EventSubChannelCheerEvent) => void): Promise<EventSubSubscription>;
    /**
     * Subscribes to events that represent a user getting banned from a channel.
     *
     * @param user The user for which to get notifications for when users get banned in their channel.
     * @param handler The function that will be called for any new notifications.
     */
    subscribeToChannelBanEvents(user: UserIdResolvable, handler: (event: EventSubChannelBanEvent) => void): Promise<EventSubSubscription>;
    /**
     * Subscribes to events that represent a user getting unbanned from a channel.
     *
     * @param user The user for which to get notifications for when users get unbanned in their channel.
     * @param handler The function that will be called for any new notifications.
     */
    subscribeToChannelUnbanEvents(user: UserIdResolvable, handler: (event: EventSubChannelUnbanEvent) => void): Promise<EventSubSubscription>;
    /**
     * Subscribes to events that represent a broadcaster raiding another broadcaster.
     *
     * @param user The broadcaster for which to get outgoing raid notifications.
     * @param handler The function that will be called for any new notifications.
     */
    subscribeToChannelRaidEventsFrom(user: UserIdResolvable, handler: (event: EventSubChannelRaidEvent) => void): Promise<EventSubSubscription>;
    /**
     * Subscribes to events that represent a broadcaster being raided by another broadcaster.
     *
     * @param user The broadcaster for which to get incoming raid notifications.
     * @param handler The function that will be called for any new notifications.
     */
    subscribeToChannelRaidEventsTo(user: UserIdResolvable, handler: (event: EventSubChannelRaidEvent) => void): Promise<EventSubSubscription>;
    /**
     * Subscribes to events that represent a Channel Points reward being added to a channel.
     *
     * @param user The user for which to get notifications for when they add a reward to their channel.
     * @param handler The function that will be called for any new notifications.
     */
    subscribeToChannelRewardAddEvents(user: UserIdResolvable, handler: (data: EventSubChannelRewardEvent) => void): Promise<EventSubSubscription>;
    /**
     * Subscribes to events that represent a Channel Points reward being updated.
     *
     * @param user The user for which to get notifications for when they update a reward.
     * @param handler The function that will be called for any new notifications.
     */
    subscribeToChannelRewardUpdateEvents(user: UserIdResolvable, handler: (data: EventSubChannelRewardEvent) => void): Promise<EventSubSubscription>;
    /**
     * Subscribes to events that represent a specific Channel Points reward being updated.
     *
     * @param user The user for which to get notifications for when they update the reward.
     * @param rewardId The ID of the reward for which to get notifications when it is updated.
     * @param handler The function that will be called for any new notifications.
     */
    subscribeToChannelRewardUpdateEventsForReward(user: UserIdResolvable, rewardId: string, handler: (data: EventSubChannelRewardEvent) => void): Promise<EventSubSubscription>;
    /**
     * Subscribes to events that represent a Channel Points reward being removed.
     *
     * @param user The user for which to get notifications for when they remove a reward.
     * @param handler The function that will be called for any new notifications.
     */
    subscribeToChannelRewardRemoveEvents(user: UserIdResolvable, handler: (data: EventSubChannelRewardEvent) => void): Promise<EventSubSubscription>;
    /**
     * Subscribes to events that represent a specific Channel Points reward being removed.
     *
     * @param user The user for which to get notifications for when they remove the reward.
     * @param rewardId The ID of the reward to get notifications for when it is removed.
     * @param handler The function that will be called for any new notifications.
     */
    subscribeToChannelRewardRemoveEventsForReward(user: UserIdResolvable, rewardId: string, handler: (data: EventSubChannelRewardEvent) => void): Promise<EventSubSubscription>;
    /**
     * Subscribes to events that represents a Channel Points reward being redeemed.
     *
     * @param user The user for which to get notifications for when their rewards are redeemed.
     * @param handler The function that will be called for any new notifications.
     */
    subscribeToChannelRedemptionAddEvents(user: UserIdResolvable, handler: (data: EventSubChannelRedemptionAddEvent) => void): Promise<EventSubSubscription>;
    /**
     * Subscribes to events that represent a specific Channel Points reward being redeemed.
     *
     * @param user The user for which to get notifications when their reward is redeemed.
     * @param rewardId The ID of the reward for which to get notifications when it is redeemed.
     * @param handler The function that will be called for any new notifications.
     */
    subscribeToChannelRedemptionAddEventsForReward(user: UserIdResolvable, rewardId: string, handler: (data: EventSubChannelRedemptionAddEvent) => void): Promise<EventSubSubscription>;
    /**
     * Subscribes to events that represent a Channel Points reward being updated by a broadcaster.
     *
     * @param user The user for which to get notifications for when they update a reward.
     * @param handler The function that will be called for any new notifications.
     */
    subscribeToChannelRedemptionUpdateEvents(user: UserIdResolvable, handler: (data: EventSubChannelRedemptionUpdateEvent) => void): Promise<EventSubSubscription>;
    /**
     * Subscribes to events that represent a specific Channel Points reward being updated by a broadcaster.
     *
     * @param user The user for which to get notifications for when they update the reward.
     * @param rewardId The ID of the reward for which to get notifications when it gets updated.
     * @param handler The function that will be called for any new notifications.
     */
    subscribeToChannelRedemptionUpdateEventsForReward(user: UserIdResolvable, rewardId: string, handler: (data: EventSubChannelRedemptionUpdateEvent) => void): Promise<EventSubSubscription>;
    /**
     * Subscribes to events that represent a Hype Train beginning.
     *
     * @param user The user for which to get notifications about Hype Trains in their channel.
     * @param handler The function that will be called for any new notifications.
     */
    subscribeToChannelHypeTrainBeginEvents(user: UserIdResolvable, handler: (data: EventSubChannelHypeTrainBeginEvent) => void): Promise<EventSubSubscription>;
    /**
     * Subscribes to events that represent progress in a Hype Train in a channel.
     *
     * @param user The user for which to get notifications about Hype Trains in their channel.
     * @param handler The function that will be called for any new notifications.
     */
    subscribeToChannelHypeTrainProgressEvents(user: UserIdResolvable, handler: (data: EventSubChannelHypeTrainProgressEvent) => void): Promise<EventSubSubscription>;
    /**
     * Subscribes to events that represent the end of a Hype Train in a channel.
     *
     * @param user The user for which to get notifications about Hype Trains in their channel.
     * @param handler The function that will be called for any new notifications.
     */
    subscribeToChannelHypeTrainEndEvents(user: UserIdResolvable, handler: (data: EventSubChannelHypeTrainEndEvent) => void): Promise<EventSubSubscription>;
    /**
     * Subscribes to events that represent a user revoking authorization from an application.
     *
     * @param clientId The Client ID for which to get notifications about authorization revocations.
     * @param handler The function that will be called for any new notifications.
     */
    subscribeToUserAuthorizationRevokeEvents(clientId: string, handler: (data: EventSubUserAuthorizationRevokeEvent) => void): Promise<EventSubSubscription>;
    /**
     * Subscribes to events that represent a user updating their account details.
     *
     * @param user The user for which to get notifications about account updates.
     * @param handler The function that will be called for any new notifications.
     */
    subscribeToUserUpdateEvents(user: UserIdResolvable, handler: (data: EventSubUserUpdateEvent) => void): Promise<EventSubSubscription>;
    /** @private */
    _buildHookUrl(id: string): Promise<string>;
    /** @private */
    _dropSubscription(id: string): void;
    /** @private */
    _dropTwitchSubscription(id: string): void;
    /** @private */
    _registerTwitchSubscription(id: string, data: HelixEventSubSubscription): void;
    private _genericSubscribe;
    private _createHandleRequest;
}
