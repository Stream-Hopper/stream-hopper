import type { HelixEventSubSubscription, HelixEventSubTransportOptions } from 'twitch';
import type { EventSubListener } from '../EventSubListener';
/** @private */
export declare type SubscriptionResultType<T extends EventSubSubscription> = T extends EventSubSubscription<infer O> ? O : never;
/**
 * @hideProtected
 */
export declare abstract class EventSubSubscription</** @private */ T = any> {
    protected _handler: (obj: T) => void;
    protected _client: EventSubListener;
    private _verified;
    private _twitchSubscriptionData?;
    /** @private */
    protected constructor(_handler: (obj: T) => void, _client: EventSubListener);
    /**
     * Whether the subscription has been verified by Twitch.
     */
    get verified(): boolean;
    private get _secret();
    /** @private */
    get _twitchId(): string | undefined;
    /** @private */
    _verify(): void;
    /** @private */
    _verifyData(messageId: string, timestamp: string, body: string, algoAndSignature: string): boolean;
    /** @private */
    _handleData(body: Record<string, unknown>): void;
    /**
     * Activates the subscription.
     */
    start(resumeFrom?: HelixEventSubSubscription): Promise<void>;
    /**
     * Suspends the subscription, not removing it from the listener.
     */
    suspend(): Promise<void>;
    /**
     * Deactivates the subscription and removes it from the listener.
     */
    stop(): Promise<void>;
    protected _getTransportOptions(): Promise<HelixEventSubTransportOptions>;
    /** @private */
    abstract get id(): string;
    protected abstract _subscribe(): Promise<HelixEventSubSubscription>;
    protected abstract transformData(response: unknown): T;
    private _unsubscribe;
}
