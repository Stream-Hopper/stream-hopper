"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSubSubscription = void 0;
var tslib_1 = require("tslib");
var crypto = require("crypto");
var twitch_common_1 = require("twitch-common");
/**
 * @hideProtected
 */
var EventSubSubscription = /** @class */ (function () {
    /** @private */
    function EventSubSubscription(_handler, _client) {
        this._handler = _handler;
        this._client = _client;
        this._verified = false;
    }
    Object.defineProperty(EventSubSubscription.prototype, "verified", {
        /**
         * Whether the subscription has been verified by Twitch.
         */
        get: function () {
            return this._verified;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubSubscription.prototype, "_secret", {
        get: function () {
            return (this.id + "." + this._client._secret).slice(-100);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EventSubSubscription.prototype, "_twitchId", {
        /** @private */
        get: function () {
            var _a;
            return (_a = this._twitchSubscriptionData) === null || _a === void 0 ? void 0 : _a.id;
        },
        enumerable: false,
        configurable: true
    });
    /** @private */
    EventSubSubscription.prototype._verify = function () {
        this._verified = true;
    };
    /** @private */
    EventSubSubscription.prototype._verifyData = function (messageId, timestamp, body, algoAndSignature) {
        var _a = tslib_1.__read(algoAndSignature.split('=', 2), 2), algorithm = _a[0], signature = _a[1];
        var hash = crypto
            .createHmac(algorithm, this._secret)
            .update(messageId + timestamp + body)
            .digest('hex');
        return hash === signature;
    };
    /** @private */
    EventSubSubscription.prototype._handleData = function (body) {
        this._handler(this.transformData(body));
    };
    /**
     * Activates the subscription.
     */
    EventSubSubscription.prototype.start = function (resumeFrom) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!resumeFrom) return [3 /*break*/, 2];
                        if (resumeFrom.status === 'enabled') {
                            this._twitchSubscriptionData = resumeFrom;
                            this._client._logger.debug("Successfully resumed subscription for event: " + this.id);
                            return [2 /*return*/];
                        }
                        this._client._logger.info("Cycling broken conflicting subscription for event: " + this.id);
                        return [4 /*yield*/, this._unsubscribe()];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2:
                        _a = this;
                        return [4 /*yield*/, this._subscribe()];
                    case 3:
                        _a._twitchSubscriptionData = _b.sent();
                        this._client._registerTwitchSubscription(this.id, this._twitchSubscriptionData);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Suspends the subscription, not removing it from the listener.
     */
    EventSubSubscription.prototype.suspend = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._twitchSubscriptionData) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this._unsubscribe()];
                    case 1:
                        _a.sent();
                        this._twitchSubscriptionData = undefined;
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Deactivates the subscription and removes it from the listener.
     */
    EventSubSubscription.prototype.stop = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.suspend()];
                    case 1:
                        _a.sent();
                        this._client._dropSubscription(this.id);
                        return [2 /*return*/];
                }
            });
        });
    };
    EventSubSubscription.prototype._getTransportOptions = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = {
                            method: 'webhook'
                        };
                        return [4 /*yield*/, this._client._buildHookUrl(this.id)];
                    case 1: return [2 /*return*/, (_a.callback = _b.sent(),
                            _a.secret = this._secret,
                            _a)];
                }
            });
        });
    };
    EventSubSubscription.prototype._unsubscribe = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._twitchSubscriptionData) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._client._apiClient.helix.eventSub.deleteSubscription(this._twitchSubscriptionData.id)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        this._client._dropTwitchSubscription(this.id);
                        return [2 /*return*/];
                }
            });
        });
    };
    EventSubSubscription = tslib_1.__decorate([
        twitch_common_1.rtfm('twitch-eventsub', 'EventSubSubscription')
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ], EventSubSubscription);
    return EventSubSubscription;
}());
exports.EventSubSubscription = EventSubSubscription;
