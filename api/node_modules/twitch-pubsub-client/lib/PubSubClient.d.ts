import type { ApiClient } from 'twitch';
import type { UserIdResolvable } from 'twitch-common';
import { BasicPubSubClient } from './BasicPubSubClient';
import type { PubSubBitsBadgeUnlockMessage } from './Messages/PubSubBitsBadgeUnlockMessage';
import type { PubSubBitsMessage } from './Messages/PubSubBitsMessage';
import type { PubSubChatModActionMessage } from './Messages/PubSubChatModActionMessage';
import type { PubSubRedemptionMessage } from './Messages/PubSubRedemptionMessage';
import type { PubSubSubscriptionMessage } from './Messages/PubSubSubscriptionMessage';
import type { PubSubWhisperMessage } from './Messages/PubSubWhisperMessage';
import type { PubSubListener } from './PubSubListener';
import { SingleUserPubSubClient } from './SingleUserPubSubClient';
/**
 * A high level PubSub client attachable to a multiple users.
 */
export declare class PubSubClient {
    private readonly _rootClient;
    private readonly _userClients;
    /**
     * Creates a new PubSub client.
     *
     * @param rootClient A previously existing PubSubClient instance.
     *
     * If not given, one will be created with the default options.
     */
    constructor(rootClient?: BasicPubSubClient);
    /**
     * Attaches a new user to the listener and returns the user ID for convenience.
     *
     * @param apiClient The client that provides authentication for the user.
     * @param user The user that the client will be attached to.
     *
     * This should only be passed manually if you fetched the token info for the `apiClient` before.
     *
     * If not given, the user will be determined from the `apiClient`.
     */
    registerUserListener(apiClient: ApiClient, user?: UserIdResolvable): Promise<string>;
    /** @private */
    getUserListener(user: UserIdResolvable): SingleUserPubSubClient;
    /**
     * Adds a listener to bits events to the client.
     *
     * @param user The user the event will be subscribed for.
     * @param callback A function to be called when a bits event happens in the user's channel.
     *
     * It receives a {@PubSubBitsMessage} object.
     */
    onBits(user: UserIdResolvable, callback: (message: PubSubBitsMessage) => void): Promise<PubSubListener<never>>;
    /**
     * Adds a listener to bits badge unlock events to the client.
     *
     * @param user The user the event will be subscribed for.
     * @param callback A function to be called when a bit badge is unlocked in the user's channel.
     *
     * It receives a {@PubSubBitsBadgeUnlockMessage} object.
     */
    onBitsBadgeUnlock(user: UserIdResolvable, callback: (message: PubSubBitsBadgeUnlockMessage) => void): Promise<PubSubListener<never>>;
    /**
     * Adds a listener to redemption events to the client.
     *
     * @param user The user the event will be subscribed for.
     * @param callback A function to be called when a channel point reward is redeemed in the user's channel.
     *
     * It receives a {@PubSubRedemptionMessage} object.
     */
    onRedemption(user: UserIdResolvable, callback: (message: PubSubRedemptionMessage) => void): Promise<PubSubListener<never>>;
    /**
     * Adds a listener to subscription events to the client.
     *
     * @param user The user the event will be subscribed for.
     * @param callback A function to be called when a subscription event happens in the user's channel.
     *
     * It receives a {@PubSubSubscriptionMessage} object.
     */
    onSubscription(user: UserIdResolvable, callback: (message: PubSubSubscriptionMessage) => void): Promise<PubSubListener<never>>;
    /**
     * Adds a listener to whisper events to the client.
     *
     * @param user The user the event will be subscribed for.
     * @param callback A function to be called when a whisper is sent to the user.
     *
     * It receives a {@PubSubWhisperMessage} object.
     */
    onWhisper(user: UserIdResolvable, callback: (message: PubSubWhisperMessage) => void): Promise<PubSubListener<never>>;
    /**
     * Adds a listener to mod action events to the client.
     *
     * @param user The user the event will be subscribed for.
     * @param channel The channel the event will be subscribed for.
     * @param callback A function to be called when a mod action event is sent to the user.
     *
     * It receives a {@PubSubChatModActionMessage} object.
     */
    onModAction(user: UserIdResolvable, channel: UserIdResolvable, callback: (message: PubSubChatModActionMessage) => void): Promise<PubSubListener<never>>;
    private static _getCorrectUserId;
}
