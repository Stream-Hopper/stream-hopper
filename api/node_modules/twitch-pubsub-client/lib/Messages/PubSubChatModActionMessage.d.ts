import type { ApiClient, HelixUser } from 'twitch';
/** @private */
export interface PubSubChatModActionMessageContent {
    type: string;
    moderation_action: string;
    args: string[];
    created_by: string;
    created_by_user_id: string;
}
/** @private */
export interface PubSubChatModActionMessageData {
    data: PubSubChatModActionMessageContent;
}
/**
 * A message that informs about a moderation action being performed in a channel.
 */
export declare class PubSubChatModActionMessage {
    private readonly _channelId;
    private readonly _apiClient;
    private readonly _data;
    /** @private */
    constructor(data: PubSubChatModActionMessageData, _channelId: string, apiClient: ApiClient);
    /**
     * The ID of the channel where the action was performed.
     */
    get channelId(): string;
    /**
     * Retrieves more information about the channel where the action was performed.
     *
     * @deprecated Use {@HelixUserApi#getUserById} instead.
     */
    getChannel(): Promise<HelixUser | null>;
    /**
     * The type of the message.
     */
    get type(): string;
    /**
     * The action that was performed.
     */
    get action(): string;
    /**
     * The arguments given to the action.
     */
    get args(): string[];
    /**
     * The user ID of the moderator that performed the action.
     */
    get userId(): string;
    /**
     * The name of the moderator that performed the action.
     */
    get userName(): string;
    /**
     * Retrieves more information about the user that performed the action.
     *
     * @deprecated Use {@HelixUserApi#getUserById} instead.
     */
    getUser(): Promise<HelixUser | null>;
}
