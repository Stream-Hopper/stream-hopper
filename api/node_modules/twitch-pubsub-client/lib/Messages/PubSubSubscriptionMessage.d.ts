import type { ApiClient, HelixUser } from 'twitch';
import type { PubSubBasicMessageInfo, PubSubChatMessage } from './PubSubMessage';
/** @private */
export interface PubSubSubscriptionDetail {
    context: 'sub' | 'resub';
    cumulative_months: number;
    streak_months: number;
}
/** @private */
export interface PubSubSubscriptionGiftDetail {
    context: 'subgift' | 'anonsubgift';
    recipient_id: string;
    recipient_user_name: string;
    recipient_display_name: string;
    months: number;
    multi_month_duration: number;
}
/** @private */
export declare type PubSubSubscriptionMessageData = PubSubBasicMessageInfo & {
    display_name: string;
    sub_plan: 'Prime' | '1000' | '2000' | '3000';
    sub_plan_name: string;
    sub_message: PubSubChatMessage;
} & (PubSubSubscriptionDetail | PubSubSubscriptionGiftDetail);
/**
 * A message that informs about a user subscribing to a channel.
 */
export declare class PubSubSubscriptionMessage {
    private readonly _apiClient;
    private readonly _data;
    /** @private */
    constructor(data: PubSubSubscriptionMessageData, apiClient: ApiClient);
    /**
     * The ID of the user subscribing to the channel.
     */
    get userId(): string;
    /**
     * The name of the user subscribing to the channel.
     */
    get userName(): string;
    /**
     * The display name of the user subscribing to the channel.
     */
    get userDisplayName(): string;
    /**
     * The streak amount of months the user has been subscribed for.
     *
     * Returns 0 if a gift sub or the streaks months.
     */
    get streakMonths(): number;
    /**
     * The cumulative amount of months the user has been subscribed for.
     *
     * Returns the months if a gift sub or the cumulative months.
     */
    get cumulativeMonths(): number;
    /**
     * The cumulative amount of months the user has been subscribed for.
     *
     * Returns the months if a gift sub or the cumulative months.
     */
    get months(): number;
    /**
     * The time the user subscribed.
     */
    get time(): Date;
    /**
     * The message sent with the subscription.
     *
     * Returns null if the subscription is a gift subscription.
     */
    get message(): PubSubChatMessage | null;
    /**
     * The plan of the subscription.
     */
    get subPlan(): string;
    /**
     * Whether the subscription is a resub.
     */
    get isResub(): boolean;
    /**
     * Whether the subscription is a gift.
     */
    get isGift(): boolean;
    /**
     * Whether the subscription is from an anonymous gifter.
     */
    get isAnonymous(): boolean;
    /**
     * The ID of the user gifting the subscription.
     *
     * Returns null if the subscription is not a gift.
     */
    get gifterId(): string | null;
    /**
     * The name of the user gifting the subscription.
     *
     * Returns null if the subscription is not a gift.
     */
    get gifterName(): string | null;
    /**
     * The display name of the user gifting the subscription.
     *
     * Returns null if the subscription is not a gift.
     */
    get gifterDisplayName(): string | null;
    /**
     * The duration of the gifted subscription, in months.
     *
     * Returns null if the subscription is not a gift.
     */
    get giftDuration(): number | null;
    /**
     * Retrieves more information about the subscribing user.
     *
     * @deprecated Use {@HelixUserApi#getUserById} instead.
     */
    getUser(): Promise<HelixUser | null>;
    /**
     * Retrieves more information about the gifting user.
     *
     * Returns null if the subscription is not a gift.
     *
     * @deprecated Use {@HelixUserApi#getUserById} instead.
     */
    getGifter(): Promise<HelixUser | null>;
}
